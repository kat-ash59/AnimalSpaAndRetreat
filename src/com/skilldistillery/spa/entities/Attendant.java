/*
 * 
 * Date				Author			Purpose
 * ===================================================================================================================
 * 09/27/2024		Kat Ash			created initial version of the Attendant class
 * 									provides an attendant who will help around the spa
 * 
 * 10/04/2024		Kat Ash			finalized code and ready to check in
 * 
 */

package com.skilldistillery.spa.entities;

import java.util.Objects;

public class Attendant 
{
	// variables used by the Attendant class and are visible to the class
	private String name;
	private static boolean debug = false;

	
	// constructors
	public Attendant()
	{
	} // no arg constructor
	
	public Attendant(String name) 
	{
		super();
		this.name = name;
	} // end constructor
	
	
	// worker bee methods that perform various tasks for the class
	public void introduceSelf(String name)
	{
		
		System.out.println("Huzzah!!!!!! \n" 
				+ "Hi my name is "  + name + " your friendly and attentive attendant.\n" 
				+ "I got the job of my dreams as Attendant "
				+ "JUST BEFORE THE COMPLETION OF THE NEW Animal Retreat and Spa! \nI can\'t wait to get started"
				+ " helping all of our Animal Friends enjoy their stay here at our Luxurious Spa and Retreat!\n");
	
	} // end method introduce self

	
	
	public void makeRounds(Animal[] animalsAtTheSpa)
	{
		// this method will have the attendant check on each of the rooms
		// and feed the guests
		// clean the rooms if necessary
		if (debug == true)
		{
			System.out.println("In Attendant makeRounds");
		} // end debug if
	
		try 
		{
			int i = 0;
			for(i = 0; i < 10; i++)
			{
				Animal myworkingAnimal = animalsAtTheSpa[i];
				
				if (myworkingAnimal == null)
				{
					if (debug == true)
					{
						System.out.println("in Attendant myworking animal is null calling clean Room");
					} // end debug if
					cleanRoom(i, animalsAtTheSpa);
					System.out.println("Room " + i + " is now clean");
					
				} // end if
	
				else
				{
					if (debug == true)
					{
						System.out.println("in Attendant myworking animal occupied");
					}
					String name = animalsAtTheSpa[i].getName();
					
					if (name.equalsIgnoreCase("Clean"))
					{
						System.out.println("Room " + i + " is now clean");
					}
					else
					{
						System.out.println("Room " + i + " is occupied by " 
								+ animalsAtTheSpa[i].getName() 
								+ " the " + animalsAtTheSpa[i].getSpecies() + "\n");
						myworkingAnimal = animalsAtTheSpa[i];
						System.out.println("I will now feed " + animalsAtTheSpa[i].getName());
						myworkingAnimal.eat(100.0);
					}
						
				} // end else
				
				if (debug == true)
				{
					System.out.println("just at end of loop should go back if i < 10 i = " + i);
				}
			} // end for loop
			
		} // end try
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("You did something really wrong here");
		}
	
	} // end makeRounds method
	
	
	public void cleanRoom(int roomToBeCleaned, Animal[] animalsAtTheSpa)
	{
		// this method will mark the room clean
		if (debug == true)
		{
			System.out.println("In Attendant method clean room");
			System.out.println("Room to be cleaned = " + roomToBeCleaned);
		}
		
		Animal myworkingAnimal = animalsAtTheSpa[roomToBeCleaned];
		if (myworkingAnimal == null)
		{
			Clean myCleaner = new Clean();
			myCleaner.setName("Clean");
			animalsAtTheSpa[roomToBeCleaned] = myCleaner;
		}
		
		if (debug == true)
		{
			String tmpName = animalsAtTheSpa[roomToBeCleaned].getName();
			System.out.println("name now should be clean = " + tmpName);
			System.out.println("Cleaned the room " + roomToBeCleaned);
		}
		
	} // end method to clean the room
	

	
	// getters and setters auto generated by STS
	public String getName() 
	{
		return name;
	} // end method getName

	public void setName(String name) 
	{
		this.name = name;
	} // end method setName


	// method toString autoGenerated by STS
	@Override
	public String toString() 
	{
		return "Attendant [name=" + name + ", getClass()=" + getClass() + ", toString()=" + super.toString() + "]";
	} // end method toString
	
	
	// method hashCode auto generated by STS
	@Override
	public int hashCode() 
	{
		return Objects.hash(name);
	} // end method hashCode

	// method equals auto generated by STS
	@Override
	public boolean equals(Object obj) 
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Attendant other = (Attendant) obj;
		return Objects.equals(name, other.name);
	} // end method equals
	
	
} // end class Attendant
