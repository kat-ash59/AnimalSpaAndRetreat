/*
 * This class extends the abstract class that builds the foundation for multiple different animals
 * 
 * Date				Author			Purpose
 * 09/27/2024		Kat Ash			created initial version of the Animal abstract class
 * 
 */

package com.skilldistillery.spa.entities;

import java.util.Arrays;
import java.util.Objects;


public abstract class Animal 
{
	// declare variables that are visible for whole class Animal
	protected String name;
	private String noise = "I\'m an animal and thats OK,  I sleep all night and play all day!\n";
	
	
	// constructors
	public Animal() 
	{
	} // empty constructor


	public Animal (String name)
	{
		this.name = name;
	} // end constructor with just name - always leave comments at the end of curly braces to know who they belong to
	
	
	public Animal(String name, String noise) 
	{
		super();
		this.name = name;
		this.noise = noise;
	}  // end constructor with variables name, noise
	


	// this section contains the useful methods that Animal class uses
	// while they can be called by other methods they cannot reside inside of other methods
	// methods
	public void makeNoise(String noise)
	{
		System.out.println(this.noise);
		System.out.println(noise);
	}  // end method makeNoise with arguments
	
	public void makeNoise()
	{
		System.out.println(this.noise);
	} // end method makeNoise with no arguments
	
	public void eat(double quantity)
	{
		System.out.println("Don't bother me, I\'m eating " + quantity + " lbs of food.");
	} // end method eat

	
	// these methods are auto generated by STS and are required for every program
	// getters and setters
	public String getName() 
	{
		return name;
	} // end method getName


	public void setName(String name) {
		this.name = name;
	} // end method setName


	public String getNoise() 
	{
		return noise;
	}  // end method getNoise


	public void setNoise(String noise) 
	{
		this.noise = noise;
	} // end method setNoise





	// toString method that must include field names, and inherited methods 
	@Override
	public String toString() 
	{
		return "Animal [name = " + name + ", nois e= " + noise + ", getClass() = " + getClass() + ", toString() = "
				+ super.toString() + "]";
	} // end toStringMethod

	// hashcode comparison method
	@Override
	public int hashCode() 
	{
		return Objects.hash(name, noise);
	} // end hashCode method



	// equals method that is used when comparing objects of the Animal class
	@Override
	public boolean equals(Object obj) 
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Animal other = (Animal) obj;
		return Objects.equals(name, other.name) && Objects.equals(noise, other.noise);
	} // end equals method


	protected abstract String getSpecies();
	
	
	
	


} // end class Animal
