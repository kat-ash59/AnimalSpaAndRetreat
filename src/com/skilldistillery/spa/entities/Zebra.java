/*
 * This class extends the abstract class Animal and provides the characteristics that are 
 * part of who a Zebra is
 * 
 * Date				Author			Purpose
 * 09/27/2024		Kat Ash			created initial version of the Zebra class
 * 
 * 10/04/2024		Kat Ash			finalized the code and ready to check in
 * 
 */


package com.skilldistillery.spa.entities;

import java.util.Objects;

public class Zebra  extends Animal
{

	// variables that are visible to the class Zebra
	private String noise = "Brayyyyyy, Bark, Brayyyyyy!";
	
	
	// constructors
	public Zebra() 
	{
	} // end no arg constructor


	public Zebra(String name, String noise) 
	{
		super();
		super.setName(name);
		this.noise = noise;
	} // end constructor
	
	
	// methods that are used by anyone who wants to work with a Zebra
	// these are the worker bee methods
	@Override
	public void makeNoise()
	{
		super.makeNoise();
		System.out.println(noise);
		
	} // end makeNoise method
	
	public String getSpecies()
	{
		return "Zebra";
	} // end method getSpecies

	
	@Override
	public void makeNoise(String noise)
	{
		Zebra myZebra = new Zebra();
		myZebra.makeNoise();
		System.out.println(noise);
	} // end method makeNoise 


	@Override
	public void eat(double quantity)
	{
		System.out.println("\n\tDon't bother me, I\'m eating " + quantity + " lbs of mouth watering Sporobolus pumilus hay.\n");
	} // end method eat
	

	// getters and setters that are auto generated by STS
	public String getNoise() 
	{
		return noise;
	} // end getNoise method


	public void setNoise(String noise) 
	{
		this.noise = noise;
	} // end setNoise method


	
	// this is the toString that is auto generated by STS
	@Override
	public String toString() 
	{
		return "Zebra [noise=" + noise + ", name=" + name + ", getName()=" + getName() + ", toString()="
				+ super.toString() + ", hashCode()=" + hashCode() + ", getClass()=" + getClass() + "]";
	} // end toString


	// this is the hasCode that is auto generated by STS
	@Override
	public int hashCode() 
	{
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + Objects.hash(noise);
		return result;
	} // end method hashCode


	// this is the equals comparator that is auto generated by STS
	@Override
	public boolean equals(Object obj) 
	{
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		Zebra other = (Zebra) obj;
		return Objects.equals(noise, other.noise);
	}  // end method equals

	
} // end class Zebra
